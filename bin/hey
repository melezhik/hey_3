#!/usr/bin/env raku
# Copyright (C) 2022 Kay Rhodes (a.k.a masukomi)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# YOUR CONTRIBUTIONS, FINANCIAL, OR CODE, TO MAKING THIS A BETTER TOOL
# ARE GREATLY APPRECIATED. See https://interrupttracker.com



# Dear Developer who is not me.
# Thanks for your curiousity about this code.
# Please know that it was written in a mad rush,
# and as such, it could use a lot of refactoring.
# Any improvements you can offer will be welcomed.
# - masukomi

use v6;
use lib 'lib';
use DB::SQLite;
use XDG::GuaranteedResources;
use Listicles;
use DateTime::Format;
use Definitely;
use Hey::Database;
use Hey::Event;
use Hey::Interruption;
use Hey::Person;
use Hey::Project;
use Hey::Resourcer;
use Hey::Tag;
use Hey::Timer;
use Hey::Utilities;

# alas, these come from Date.pm6 but they're not
# extractable from it :(
constant time_units = <second seconds minute minutes hour hours day days week weeks month months year years>.Array;
constant time_regexp = /^ (\d ** 1..2) [ ":" (\d ** 2) ]?/;
# ex                         04           :   30
#                             4           :   30
#                             4
constant uninterruptable = <start stop log log-interrupts running kill>.Array;

# hey start @my_proj +tag1 +tag2
# hey start at 4 @my_proj +tag1 +tag2
# hey start at 4:30 @my_proj +tag1 +tag2
# hey start 4 minutes ago @my_proj +tag1 +tag2
# hey start 2 hours ago @my_proj +tag1

#| Start a new timer
multi sub MAIN('start',
		 *@start_args #= optional time adjustment, project(s), & optional tags
		) {
	my $db = DB::SQLite.new(filename => guarantee-db());
	my $connection = $db.db;
	my $time = DateTime.now();
	my %compiled_args = compile-timer-args(@start_args);

	if %compiled_args<projects>.elems == 0 {
		die("must specify at least one project to start a timer.");
	}

	if %compiled_args<time_stuff>.elems > 0 {
		$time = adjust-date-time($time, %compiled_args<time_stuff>)
	}
	my $event_hash = create-event($connection, "timer", $time.posix());
	# TODO figure out why i need .Array here
	# it's $["\@foo"] without it and ["\@foo"] with it
    for %compiled_args<projects>.Array -> $project_name {
		my $project_hash = find-or-create-project($project_name, $connection);
		bind-event-project($event_hash<id>, $project_hash<id>, $connection);
	}
	for %compiled_args<tags>.Array -> $tag { # may be empty list
		tag-event($tag, $event_hash<id>, $connection);
	}
	say("Started Timer ($event_hash<id>) for "
		~ %compiled_args<projects>.join(", ")
		~ " at "
		~ datestring($time)
	   );

}


# hey stop at 4
# hey stop at 4:30
# hey stop 4 minutes ago
# hey stop 2 hours ago

#| stop an existing timer
multi sub MAIN("stop",
		*@stop_args #= optional id, and optional time adjustments (e.g. 4 minutes ago)
		) {

	my $db = DB::SQLite.new(filename => guarantee-db());
	my $connection = $db.db;
	my $time = DateTime.now().local;
	my $id_match =  @stop_args
					 ?? @stop_args[0].match(/^ (\d+) $/)
					 !! Nil;
	my $simple_relative_time_match = @stop_args
									  ?? @stop_args.join(" ") .match(/^ \d+ \s+ \w+ \s+ "ago"/)
									  !! Nil;
	# IF we have a realtive time match
	# then the id match is bogus.
	my $id = ($id_match and (! $simple_relative_time_match))
			  ?? $id_match[0].Int
			  !! -1;

	my %compiled_args = compile-timer-args(
		$id == -1 ?? @stop_args !! @stop_args.splice(1)
	);

	if %compiled_args<time_stuff>.elems > 0 {
		$time = adjust-date-time($time, %compiled_args<time_stuff>)
	}
    my $stopped = ($id == -1)
					?? stop-event($time.posix(), $connection)
					!! stop-specific-event($id, $time.posix(), $connection);

	$stopped ?? say("Stopped at " ~ datestring($time))
			 !! say("No timer was running");

}

#| see a log of recent timers
multi sub MAIN("log",
			   Int $number, #= number of duration units
			   Str $duration #= duration string. E.g. minutes, hours, days, etc.
			  ) {

	generate-log("timers", $number, $duration);
}

#| see a log of recent interruptions
multi sub MAIN("log-interrupts",
			   Int $number, #= number of duration units
			   Str $duration  #= duration string. E.g. minutes, hours, days, etc.
			  ) {

	generate-log("interruptions", $number, $duration);
}


#| lets you know if there are any timers running & what they are for
multi sub MAIN("running") {
	my $db = DB::SQLite.new(filename => guarantee-db(), :readonly);
	my $connection = $db.db;
	my $timers = current-timers($connection);
	if $timers ~~ Some {
		my $timers_value = $timers.value;
		for $timers_value.Array -> $timer_hash {
			$timer_hash<projects> = timer-projects($timer_hash, $connection);
			$timer_hash<tags> = timer-tags($timer_hash<id>, $connection);
		}
		display-timers-as-table($timers_value, "Running Timers", False);
	} else {
		say("No timer running.");
	}
}

#| Record an interruption
multi sub MAIN(Str $name, #= name of person / thing that interrupted you
		 *@start_args #= optional time adjustment, & optional projects, & optional tags
		) {

	if uninterruptable.includes($name) {
		# TODO - implement sensible defaults for the ones
		# we can, like log, and log-interrupts
		note("I don't think that's quite right. Here are some docs...\n");
		note($*USAGE);
		exit 64;
	}

	my $db = DB::SQLite.new(filename => guarantee-db());
	my $connection = $db.db;
	my $time = DateTime.now();
	my %compiled_args = compile-timer-args(@start_args);

	if %compiled_args<time_stuff>.elems > 0 {
		$time = adjust-date-time($time, %compiled_args<time_stuff>)
	}

	my $event_hash = create-event($connection, "interruption", $time.posix());
	# TODO figure out why i need .Array here
	# it's $["\@foo"] without it and ["\@foo"] with it

	my $person_hash = find-or-create-person($name, $connection);
	bind-event-person($event_hash<id>, $person_hash<id>, $connection);
    for %compiled_args<projects>.Array -> $project_name {
		my $project_hash = find-or-create-project($project_name, $connection);
		bind-event-project($event_hash<id>, $project_hash<id>, $connection);
	}
	for %compiled_args<tags>.Array -> $tag { # may be empty list
		tag-event($tag, $event_hash<id>, $connection);
	}
	say("Gotcha. 'twas $name");
}

#| Remove an unwanted timer.
multi sub MAIN("kill",
			   "timer",
			   Int $id #= the id of the timer to delete.
			  ) {
	my $db = DB::SQLite.new(filename => guarantee-db());
	my $connection = $db.db;
	my $event_hash = find-event-by-id($id, "timer", $connection);
	if $event_hash ~~ Some {
		kill-event($id, $connection);
		say("It's dead Jim.");
	} else {
		note("You missed your shot! There's no timer with an id of $id.");
		exit 64;
	}
}
#| Remove an unwanted person / thing from interruptions
multi sub MAIN("kill",
			   Str $name #= the name of the person/thing you wish to.... remove the records of
			  ){
	my $db = DB::SQLite.new(filename => guarantee-db());
	my $connection = $db.db;
	my $person_hash = unwrap(find-person($name, $connection), "$name wasn't found. Maybe they know what you're planning!");
	kill-person($person_hash<id>, $connection);
	say("$name is dead. Long live $name.");
}







#-----
# SUPPORT METHODS
#

sub generate-log(Str $type, Int $number, Str $duration){
		if ! time_units.includes($duration) {
		die("You must specify a valid duration");
	}
	if $number < 1 {
		die("You must specify at least 1 unit of duration. E.g. 1 week");
	}

	my $db = DB::SQLite.new(filename => guarantee-db(), :readonly);
	my $connection = $db.db;
	#TODO limit & group by day, or week or whatever
	my $since = DateTime.now().local;
	if (! ["minute", "minutes", "second", "seconds", "hour", "hours"].includes( $duration) ) {
		# we're talking days/months.
		# If you ask for 1 day you mean "today"
		if $duration eq 'day' or $duration eq 'days' {
			$since = midnightify($since);
		} else {
			# -1 because if we're on the first day already we don't want to go back past it.
			my $day_num = -1;
			if $duration eq 'week' or $duration eq 'weeks' {
				$day_num += $since.day-of-week;
			} elsif $duration eq 'month' or $duration eq 'months' {
				$day_num += $since.day-of-month;
			} else {
				$day_num += $since.day-of-year;
			}
			$since = midnightify($since.earlier(days => $day_num));
		}
		if $number > 1 {
			$since = $since.earlier([Pair.new($duration, $number - 1)]);
		}
	} else {
		$since = $since.earlier([Pair.new($duration, $number)]);
	}

	#Such Hack!
    # So Inelegant!
    if $type eq "timers" {
		my @timers = timers-since($since.posix(), $connection, order => 'ASC');
		for @timers -> %timer {
			%timer<projects> = timer-projects(%timer<id>, $connection);
			%timer<people> = [];
			%timer<tags> = timer-tags(%timer<id>, $connection);
		}
		if @timers.is-empty {
			say("No timers found");
			exit 0;
		}
		display-timers-as-table(@timers, "All Timers", False);
	} else {
		my @interruptions = interruptions-since($since.posix(), $connection, order => 'ASC');
		for @interruptions -> %interruption {
			%interruption<projects> = interruption-projects(%interruption<id>, $connection);
			%interruption<people> = interruption-people(%interruption<id>, $connection);
			%interruption<tags> = interruption-tags(%interruption<id>, $connection);
		}
		if @interruptions.is-empty {
			say("No interruptions found");
			exit 0;
		}
		display-interruptions-as-table(@interruptions, "All Interruptions");
	}


}

sub has-timer-args(@args) returns Bool {
	# 4 minutes ago
	# at 12:30, at 12

	return True if has-ago-timer-args(@args);
	return has-at-timer-args(@args);
}
sub has-ago-timer-args(@args) returns Bool {
	return ! ! (@args.elems > 2
			and @args[2] eq "ago"
			and @args[0].match(/^ \d+ $/)
			and time_units.includes(@args[1])
		   );
}
sub has-at-timer-args(@args) returns Bool {
	return ! ! (@args.elems > 1
		   and @args[0] eq "at"
		   and @args[1].match(time_regexp))
}

sub adjust-date-time(DateTime $dt, @time_stuff) returns DateTime {
	# @time_stuff = [4, "days", "ago"]
	# could add support for "hence" in addition to "ago"... seems silly though.
	return $dt if @time_stuff.is-empty;
	if has-ago-timer-args(@time_stuff) {
		$dt.earlier([Pair.new(@time_stuff[1].lc, @time_stuff[0])])
	} else {
		my $match_data = @time_stuff[1].match(time_regexp);
		my $hour = $match_data[0].Int; # 12hr time: 3 could be 03 or 15
		my $minutes = $match_data.elems > 1
					   ?? $match_data[1].Int
					   !! 0;

		# swap to 24 hour time
		my $now = DateTime.now().local;
		my $yesterday = False;

		# PLEASE REFACTOR THIS INTO SOMETHING MORE SANE
		# This just feels ugly.
		my $pre_noon = $now.hour < 12;

		if $pre_noon and $hour > $now.hour {
			$yesterday = True;
			$hour += 12;
		} elsif (! $pre_noon) and $hour < 12 {
			if ($hour <= ($now.hour - 12)) {
				# it's between 12PM and now
				$hour += 12;
			}
			# otherwise
			# it's got to be morning
			# hour stays untouched
		}


		# midnight this morning, in this time zone
		# there's got to be a better way
		my $then = DateTime.new(
			year => $now.year,
			month => $now.month,
			day => $now.day,
			hour => $hour,
			minute => $minutes,
			second => 0,
			timezone => $now.timezone
		);

		if $yesterday {
			# i see you left one running from yesterday
			$then = $then.earlier( days => 1 );
		}
		return $then
	}
}

sub extract-time-adjustment-args(@args) returns Array {
	if has-ago-timer-args(@args) {
		return @args[0..2].Array;
	} elsif has-at-timer-args(@args) {
		return @args[0..1].Array;
	}
	return [];
}
sub compile-timer-args(@args) returns Hash {
	my @inner_args = @args;
	my $time_stuff = extract-time-adjustment-args(@args);
	if $time_stuff.elems > 0 {
		@inner_args = @inner_args.splice($time_stuff.elems)
	}

	my $projects = @inner_args.grep({.starts-with('@')}).map({substr($_, 1)});
	my $tags = @inner_args.grep({ $_.starts-with("+") }).map({substr($_, 1)});

	my %compiled_args = (
		"time_stuff" => $time_stuff,
		"projects" => $projects,
		"tags" => $tags
	);
	return %compiled_args;
}


sub guarantee-db() returns Str {
	my $db_path = "data/hey/hey.db";
	my $resource_path = guarantee-resource($db_path, Hey::Resourcer);

	return $resource_path;
}

sub datestring(DateTime $dt) returns Str {
	strftime("%a, %H:%M", $dt.local);
}
